filetype off
filetype plugin indent off

" {{{ options
if has('vim_starting')
	set encoding=utf-8
	set fileencodings=iso-2022-jp,ucs-bom,sjis,utf-8,euc-jp,cp932,default,latin1
	set fileformats=unix,dos,mac
endif
scriptencoding utf-8

if &compatible
	set nocompatible
endif
"set number
set helplang=ja
set signcolumn=yes 
set hidden
set laststatus=2
set mouse=a
" „ÇØ„É™„ÉÉ„Éó„Éú„Éº„Éâ„É¨„Ç∏„Çπ„Çø„Çí‰ΩøÁî®„Åô„Çã autoselect„ÅØ„Çè„Åã„Çâ„Å™„ÅÑ
set clipboard=unnamed,autoselect
" Èü≥„ÇíÈ≥¥„Çâ„Åï„Å™„ÅÑ„Çà„ÅÜ„Å´„Åô„Çã
set belloff=all
set formatoptions+=mMj
set ambiwidth=double
" Â§ßÊñáÂ≠ó„ÅÆÊã¨Âºß„Çí%„Åß„Éû„ÉÉ„ÉÅ„Åï„Åõ„Çã
set matchpairs+=„Äå:„Äç,Ôºà:Ôºâ
set directory=~
set backupdir=~
set undodir=~
" normal mode„Å´Êàª„Å£„ÅüÂæå„ÇÇ<BS> <DELETE>„ÇíÂäπ„Åã„Åõ„Çã
set backspace=indent,eol,start
set title
let &g:titlestring =
\ "%{expand('%:p:~:.')} %<\(%{fnamemodify(getcwd(), ':~')}\)%(%m%r%w%)"
set nowrap
" }}}

" {{{ plugins
call plug#begin()

Plug 'vim-jp/vimdoc-ja'
Plug 'cohama/lexima.vim'
Plug 'machakann/vim-sandwich'
Plug 'mattn/emmet-vim'
Plug 'simeji/winresizer'
Plug 'skanehira/denops-translate.vim'
Plug 'thinca/vim-fontzoom'
Plug 'vim-denops/denops.vim'
Plug 'KeitaNakamura/neodark.vim'
Plug 'cocopon/iceberg.vim'
Plug 'yuki-yano/fuzzy-motion.vim'

" {{{ fern
Plug 'lambdalisue/fern.vim'
Plug 'lambdalisue/fern-git-status.vim'
Plug 'yuki-yano/fern-preview.vim'
" }}}

" {{{ lightline.vim
Plug 'itchyny/lightline.vim'
" }}}

" {{{ git
Plug 'lambdalisue/gin.vim'
Plug 'airblade/vim-gitgutter'
" }}}

"{{{ lsp
Plug 'prabirshrestha/vim-lsp'
Plug 'mattn/vim-lsp-settings'
Plug 'ziglang/zig.vim'
"}}}

"{{{ ddc
Plug 'Shougo/pum.vim'
Plug 'Shougo/ddc.vim'
Plug 'shun/ddc-vim-lsp'
Plug 'Shougo/ddc-around'
Plug 'Shougo/ddc-matcher_head'
Plug 'LumaKernel/ddc-file'
Plug 'Shougo/ddc-sorter_rank'
Plug 'Shougo/ddc-converter_remove_overlap'
Plug 'Shougo/ddc-cmdline-history'
Plug 'Shougo/ddc-cmdline'
"}}}

call plug#end()
" }}}

" {{{ keymaps
"           Mode  | Norm | Ins | Cmd | Vis | Sel | Opr | Term | Lang | ~
"  Command        +------+-----+-----+-----+-----+-----+------+------+ ~
"  [nore]map      | yes  |  -  |  -  | yes | yes | yes |  -   |  -   |
"  n[nore]map     | yes  |  -  |  -  |  -  |  -  |  -  |  -   |  -   |
"  [nore]map!     |  -   | yes | yes |  -  |  -  |  -  |  -   |  -   |
"  i[nore]map     |  -   | yes |  -  |  -  |  -  |  -  |  -   |  -   |
"  c[nore]map     |  -   |  -  | yes |  -  |  -  |  -  |  -   |  -   |
"  v[nore]map     |  -   |  -  |  -  | yes | yes |  -  |  -   |  -   |
"  x[nore]map     |  -   |  -  |  -  | yes |  -  |  -  |  -   |  -   |
"  s[nore]map     |  -   |  -  |  -  |  -  | yes |  -  |  -   |  -   |
"  o[nore]map     |  -   |  -  |  -  |  -  |  -  | yes |  -   |  -   |
"  t[nore]map     |  -   |  -  |  -  |  -  |  -  |  -  | yes  |  -   |
"  l[nore]map     |  -   | yes | yes |  -  |  -  |  -  |  -   | yes  |

let g:mapleader = "\<Space>"
nnoremap <Leader> <Nop>
xnoremap <Leader> <Nop>

"inoremap <silent> jj <ESC>
inoremap <silent> <Up> <C-o>gk
inoremap <silent> <Down> <C-o>gj
nnoremap <silent> <Up> gk
nnoremap <silent> <Down> gj

" expand path
cmap <C-x> <C-r>=expand('%:p:h')<CR>
" expand file 
cmap <C-z> <C-r>=expand('%:p')<CR>

nnoremap <silent> <Leader>ls :<C-u>ls<CR>
nnoremap <silent> <Leader>w :<C-u>w<CR>
nnoremap <silent> <Leader>bn :<C-u>bn<CR>
nnoremap <silent> <Leader>bp :<C-u>bp<CR>
nnoremap <silent> <Leader>bd :<C-u>bd<CR>
nnoremap <silent> <Leader>cd :<C-u>cd %:p:h<CR> :cd<CR>

nnoremap <silent> v2 vi"
nnoremap <silent> v7 vi'
nnoremap <silent> v8 vi(
nnoremap <silent> v[ vi[
nnoremap <silent> v{ vi{
nnoremap <silent> v, vi<

nnoremap <silent> va2 va"
nnoremap <silent> va7 va'
nnoremap <silent> va8 va(
nnoremap <silent> va, va<

nnoremap <silent> c2 ci"
nnoremap <silent> c7 ci'
nnoremap <silent> c8 ci(
nnoremap <silent> c[ ci[
nnoremap <silent> c{ ci{
nnoremap <silent> c, ci<

nnoremap <silent> ca2 ca"
nnoremap <silent> ca7 ca'
nnoremap <silent> ca8 ca(
nnoremap <silent> ca, ca<

nnoremap <silent> <C-j> o<ESC>
nnoremap <silent> <C-k> O<ESC>

nnoremap <silent> \ :<C-u>so $MYVIMRC<CR>

nnoremap <silent> q: :q<CR>
nnoremap <silent> qq: q:

" }}}

" {{{ plugin config

" {{{ fern
nnoremap <silent> <Leader>e :<C-u>Fern . -drawer <CR>
nnoremap <silent> <Leader>E :<C-u>Fern . -drawer -toggle<CR>
nnoremap <silent> <C-F> :Fern . -drawer -reveal=%<CR>
let g:fern#default_hidden=1

function! s:fern_settings() abort
  nmap <silent> <buffer> <C-m> <Plug>(fern-action-move)
  nmap <silent> <buffer> <C-s> <Plug>(fern-action-new-dir)
  nnoremap <buffer> <C-F> <C-W>p
  nmap <silent> <buffer> p     <Plug>(fern-action-preview:toggle)
  nmap <silent> <buffer> <C-p> <Plug>(fern-action-preview:auto:toggle)
  nmap <silent> <buffer> <C-d> <Plug>(fern-action-preview:scroll:down:half)
  nmap <silent> <buffer> <C-u> <Plug>(fern-action-preview:scroll:up:half)
  setlocal signcolumn=no
  setlocal nonumber
endfunction

augroup fern-settings
  autocmd!
  autocmd FileType fern call s:fern_settings()
augroup END
" }}}

" {{{ translate.vim
vmap <Leader>t <Plug>(VTranslate)
" }}}

" {{{ git-gutter
" By default updatetime is 4000 ms
set updatetime=100

" Use fontawesome icons as signs
let g:gitgutter_sign_added = '+'
let g:gitgutter_sign_modified = '>'
let g:gitgutter_sign_removed = '-'
let g:gitgutter_sign_removed_first_line = '^'
let g:gitgutter_sign_modified_removed = '<'

" Default key mapping off
let g:gitgutter_map_keys = 0

" }}}

"{{{ lsp
let g:lsp_document_code_action_signs_hint = {'text': 'ü™Ñ'}
let g:lsp_diagnostics_signs_error = {'text': '‚ùå'}
let g:lsp_diagnostics_signs_warning = {'text': '‚ö†Ô∏è'} 
let g:lsp_diagnostics_signs_hint = {'text': 'üîé'}
let g:lsp_diagnostics_float_delay = 1500
let g:lsp_diagnostics_float_cursor = 1
let g:lsp_settings_filetype_typescript = ['typescript-language-server', 'eslint-language-server', 'deno']
function! s:on_lsp_buffer_enabled() abort
	setlocal omnifunc=lsp#complete
	setlocal signcolumn=yes
	if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
	nmap <buffer> gdd <plug>(lsp-definition)
	nmap <buffer> gs <plug>(lsp-document-symbol-search)
	nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
	nmap <buffer> gr <plug>(lsp-references)
	nmap <buffer> gi <plug>(lsp-implementation)
	nmap <buffer> gdt <plug>(lsp-type-definition)
	nmap <buffer> <leader>rn <plug>(lsp-rename)
	nmap <buffer> [g <plug>(lsp-previous-diagnostic)
	nmap <buffer> ]g <plug>(lsp-next-diagnostic)
	nmap <buffer> K <plug>(lsp-hover)
	nnoremap <buffer> <expr><C-f> lsp#scroll(+4)
	nnoremap <buffer> <expr><C-S-f> lsp#scroll(-4)

	let g:lsp_format_sync_timeout = 1000
	autocmd! BufWritePre *.rs,*.go,*.ts call execute('LspDocumentFormatSync')

	" refer to doc to add more commands
endfunction

augroup lsp_install
	au!
	" call s:on_lsp_buffer_enabled only for languages that has the server registered.
	autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

set foldmethod=expr
	\ foldexpr=lsp#ui#vim#folding#foldexpr()
	\ foldtext=lsp#ui#vim#folding#foldtext()

let g:lsp_fold_enabled = 0

"}}}

"{{{ ddc
call ddc#custom#patch_global('completionMenu', 'pum.vim')
call ddc#custom#patch_global('sources', [
	\ 'around',
	\ 'vim-lsp',
	\ 'file',
	\ ])
call ddc#custom#patch_global('sourceOptions', {
	\ '_': {
	\   'matchers': ['matcher_head'],
	\   'sorters': ['sorter_rank'],
	\   'converters': ['converter_remove_overlap'],
	\ },
	\ 'around': {'mark': 'Around'},
	\ 'vim-lsp': {
	\   'mark': 'LSP', 
	\   'matchers': ['matcher_head'],
	\   'forceCompletionPattern': '\.|:|->|"\w+/*'
	\ },
	\ 'file': {
	\   'mark': 'file',
	\   'isVolatile': v:true, 
	\   'forceCompletionPattern': '\S/\S*'
	\ },
	\ })

call ddc#custom#patch_global('autoCompleteEvents', [
	\ 'InsertEnter', 'TextChangedI', 'TextChangedP',
	\ ])


call ddc#enable()

inoremap <Tab> <Cmd>call pum#map#insert_relative(+1)<CR>
inoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
inoremap <C-n> <Cmd>call pum#map#insert_relative(+1)<CR>
inoremap <C-p> <Cmd>call pum#map#insert_relative(-1)<CR>

" }}}

" {{{neodark
let g:neodark#terminal_transparent = 1
let g:neodark#solid_vertsplit = 1
" }}}

" {{{lightline
let g:lightline = {}
let g:lightline.colorscheme = 'iceberg'
" }}}

" {{{ fuzzy-motion
nnoremap <Leader><Leader> :<C-u>FuzzyMotion<CR>
let g:fuzzy_motion_word_regexp_list = [
  \ '[0-9a-zA-Z_-]+',
  \ '([0-9a-zA-Z_-]|[.])+',
  \ '([0-9a-zA-Z]|[()<>.-_#''"]|(\s=+\s)|(,\s)|(:\s)|(\s=>\s))+'
  \ ]
" }}}

" }}}

" {{{ commands
augroup restore-cursor
	autocmd!
	autocmd BufReadPost *
		\ : if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
		\ |   exe "normal! g`\""
		\ | endif

		\ : if empty(&buftype) && line('.') > winheight(0) / 2
		\ |   execute 'normal! zz'
		\ | endif
augroup END

augroup fileTypeIndent
	autocmd!
	autocmd BufNewFile,BufRead _vimrc setlocal tabstop=2 shiftwidth=1
augroup END

autocmd FileType vim setlocal foldmethod=marker
" }}}

" {{{ other
set background=light
colorscheme iceberg
filetype plugin indent on

command! Vimrc execute 'edit ~/dotfiles/vim/rc/_vimrc'
command! Gvimrc execute 'edit ~/dotfiles/vim/rc/gvimrc'

function g:RandomColorScheme()
	let mycolors = split(globpath(&rtp,"**/colors/*.vim"),"\n") 
	exe 'so ' . mycolors[localtime() % len(mycolors)]
	unlet mycolors
endfunction

"call g:RandomColorScheme()
" }}}
