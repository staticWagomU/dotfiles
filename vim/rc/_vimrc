filetype off
filetype plugin indent off

" {{{ options
if has('vim_starting')
	set encoding=utf-8
	set fileencodings=iso-2022-jp,ucs-bom,sjis,utf-8,euc-jp,cp932,default,latin1
	set fileformats=unix,dos,mac
endif
scriptencoding utf-8

if &compatible
	set nocompatible
endif
set number
set helplang=ja
set signcolumn=yes 
set hidden
set laststatus=2
set mouse=a
" クリップボードレジスタを使用する autoselectはわからない
set clipboard=unnamed,autoselect
" 音を鳴らさないようにする
set belloff=all
set formatoptions+=mMj
set ambiwidth=double
" 大文字の括弧を%でマッチさせる
set matchpairs+=「:」,（:）
set directory=~
set backupdir=~
set undodir=~
" normal modeに戻った後も<BS> <DELETE>を効かせる
set backspace=indent,eol,start
set title
let &g:titlestring =
\ "%{expand('%:p:~:.')} %<\(%{fnamemodify(getcwd(), ':~')}\)%(%m%r%w%)"
set nowrap
" }}}

" {{{ plugins
call plug#begin()

Plug 'vim-jp/vimdoc-ja'
Plug 'cohama/lexima.vim'
Plug 'machakann/vim-sandwich'
Plug 'mattn/emmet-vim'
Plug 'simeji/winresizer'
Plug 'skanehira/translate.vim'
Plug 'thinca/vim-fontzoom'
Plug 'vim-denops/denops.vim'
Plug 'KeitaNakamura/neodark.vim'

" {{{ fern
Plug 'lambdalisue/fern.vim'
Plug 'lambdalisue/fern-git-status.vim'
" }}}

" {{{ lightline.vim
Plug 'itchyny/lightline.vim'
" }}}

" {{{ git
Plug 'lambdalisue/gin.vim'
Plug 'airblade/vim-gitgutter'
" }}}

"{{{ lsp
Plug 'prabirshrestha/vim-lsp'
Plug 'mattn/vim-lsp-settings'
"}}}

"{{{ ddc
Plug 'Shougo/pum.vim'
Plug 'Shougo/ddc.vim'
Plug 'shun/ddc-vim-lsp'
Plug 'Shougo/ddc-around'
Plug 'Shougo/ddc-matcher_head'
Plug 'LumaKernel/ddc-file'
Plug 'Shougo/ddc-sorter_rank'
Plug 'Shougo/ddc-converter_remove_overlap'
"}}}

"{{{ ddu 
Plug 'Shougo/ddu.vim'
Plug 'Shougo/ddu-ui-ff'
Plug 'Shougo/ddu-source-file'
Plug 'Shougo/ddu-source-register'
Plug 'kuuote/ddu-source-mr'
Plug 'lambdalisue/mr.vim'
Plug 'shun/ddu-source-buffer'
Plug 'Shougo/ddu-filter-matcher_substring'
Plug 'Shougo/ddu-commands.vim'
Plug 'Shougo/ddu-ui-filer'
Plug 'Shougo/ddu-kind-file'
Plug 'Shougo/ddu-column-filename'
"}}}

call plug#end()
" }}}

" {{{ keymaps
"           Mode  | Norm | Ins | Cmd | Vis | Sel | Opr | Term | Lang | ~
"  Command        +------+-----+-----+-----+-----+-----+------+------+ ~
"  [nore]map      | yes  |  -  |  -  | yes | yes | yes |  -   |  -   |
"  n[nore]map     | yes  |  -  |  -  |  -  |  -  |  -  |  -   |  -   |
"  [nore]map!     |  -   | yes | yes |  -  |  -  |  -  |  -   |  -   |
"  i[nore]map     |  -   | yes |  -  |  -  |  -  |  -  |  -   |  -   |
"  c[nore]map     |  -   |  -  | yes |  -  |  -  |  -  |  -   |  -   |
"  v[nore]map     |  -   |  -  |  -  | yes | yes |  -  |  -   |  -   |
"  x[nore]map     |  -   |  -  |  -  | yes |  -  |  -  |  -   |  -   |
"  s[nore]map     |  -   |  -  |  -  |  -  | yes |  -  |  -   |  -   |
"  o[nore]map     |  -   |  -  |  -  |  -  |  -  | yes |  -   |  -   |
"  t[nore]map     |  -   |  -  |  -  |  -  |  -  |  -  | yes  |  -   |
"  l[nore]map     |  -   | yes | yes |  -  |  -  |  -  |  -   | yes  |

let g:mapleader = "\<Space>"
nnoremap <Leader> <Nop>
xnoremap <Leader> <Nop>

"inoremap <silent> jj <ESC>
inoremap <silent> <Up> <C-o>gk
inoremap <silent> <Down> <C-o>gj
nnoremap <silent> <Up> gk
nnoremap <silent> <Down> gj

" expand path
cmap <C-x> <C-r>=expand('%:p')<CR>
" expand file (not ext)
cmap <C-z> <C-r>=expand('%:p:r')<CR>

nnoremap <silent> <Leader>ls :<C-u>ls<CR>
nnoremap <silent> <Leader>w :<C-u>w<CR>
nnoremap <silent> <Leader>bn :<C-u>bn<CR>
nnoremap <silent> <Leader>bp :<C-u>bp<CR>
nnoremap <silent> <Leader>bd :<C-u>bd<CR>
nnoremap <silent> <silent> <Leader>cd :<C-u>cd %:p:h<CR> 

nnoremap <silent> \ :<C-u>so $MYVIMRC<CR>
" }}}

" {{{ plugin config

" {{{ fern
nnoremap <silent> <Leader>e :<C-u>Fern . -drawer <CR>
nnoremap <silent> <Leader>E :<C-u>Fern . -drawer -toggle<CR>
let g:fern#default_hidden=1

function! s:fern_settings() abort
  nmap <silent> <buffer> <C-m> <Plug>(fern-action-move)
  nmap <silent> <buffer> <C-s> <Plug>(fern-action-new-dir)
  setlocal signcolumn=no
  setlocal nonumber
endfunction

augroup fern-settings
  autocmd!
  autocmd FileType fern call s:fern_settings()
augroup END
" }}}

" {{{ translate.vim
let g:translate_source = "en"
let g:translate_target = "ja"
vmap <Leader>t <Plug>(VTranslate)
" }}}

" {{{ git-gutter
" By default updatetime is 4000 ms
set updatetime=100

" Use fontawesome icons as signs
let g:gitgutter_sign_added = '+'
let g:gitgutter_sign_modified = '>'
let g:gitgutter_sign_removed = '-'
let g:gitgutter_sign_removed_first_line = '^'
let g:gitgutter_sign_modified_removed = '<'

" Default key mapping off
let g:gitgutter_map_keys = 0

" }}}

"{{{ lsp
let g:lsp_diagnostics_float_cursor = 1
let g:lsp_settings_filetype_typescript = ['typescript-language-server', 'eslint-language-server', 'deno']
function! s:on_lsp_buffer_enabled() abort
	setlocal omnifunc=lsp#complete
	setlocal signcolumn=yes
	if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
	nmap <buffer> gdd <plug>(lsp-definition)
	nmap <buffer> gs <plug>(lsp-document-symbol-search)
	nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
	nmap <buffer> gr <plug>(lsp-references)
	nmap <buffer> gi <plug>(lsp-implementation)
	nmap <buffer> gdt <plug>(lsp-type-definition)
	nmap <buffer> <leader>rn <plug>(lsp-rename)
	nmap <buffer> [g <plug>(lsp-previous-diagnostic)
	nmap <buffer> ]g <plug>(lsp-next-diagnostic)
	nmap <buffer> K <plug>(lsp-hover)
	nnoremap <buffer> <expr><C-f> lsp#scroll(+4)
	nnoremap <buffer> <expr><C-S-f> lsp#scroll(-4)

	let g:lsp_format_sync_timeout = 1000
	autocmd! BufWritePre *.rs,*.go,*.ts call execute('LspDocumentFormatSync')

	" refer to doc to add more commands
endfunction

augroup lsp_install
	au!
	" call s:on_lsp_buffer_enabled only for languages that has the server registered.
	autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

set foldmethod=expr
	\ foldexpr=lsp#ui#vim#folding#foldexpr()
	\ foldtext=lsp#ui#vim#folding#foldtext()

let g:lsp_fold_enabled = 0

"}}}

"{{{ ddc
call ddc#custom#patch_global('completionMenu', 'pum.vim')
call ddc#custom#patch_global('sources', [
	\ 'around',
	\ 'vim-lsp',
	\ 'file'
	\ ])
call ddc#custom#patch_global('sourceOptions', {
	\ '_': {
	\   'matchers': ['matcher_head'],
	\   'sorters': ['sorter_rank'],
	\   'converters': ['converter_remove_overlap'],
	\ },
	\ 'around': {'mark': 'Around'},
	\ 'vim-lsp': {
	\   'mark': 'LSP', 
	\   'matchers': ['matcher_head'],
	\   'forceCompletionPattern': '\.|:|->|"\w+/*'
	\ },
	\ 'file': {
	\   'mark': 'file',
	\   'isVolatile': v:true, 
	\   'forceCompletionPattern': '\S/\S*'
	\ }})
call ddc#enable()
inoremap <Tab> <Cmd>call pum#map#insert_relative(+1)<CR>
inoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
" }}}

"{{{ ddu
call ddu#custom#patch_global({
	\   'ui': 'ff',
	\   'sources': [{'name':'file','params':{}},{'name':'mr'},{'name':'register'},{'name':'buffer'}],
	\   'sourceOptions': {
	\     '_': {
	\       'matchers': ['matcher_substring'],
	\     },
	\   },
	\   'kindOptions': {
	\     'file': {
	\       'defaultAction': 'open',
	\     },
	\   },
	\ })

"ddu-key-setting
autocmd FileType ddu-ff call s:ddu_my_settings()
function! s:ddu_my_settings() abort
	nnoremap <buffer><silent> <CR>
		\ <Cmd>call ddu#ui#ff#do_action('itemAction')<CR>
	nnoremap <buffer><silent> <Space>
		\ <Cmd>call ddu#ui#ff#do_action('toggleSelectItem')<CR>
	nnoremap <buffer><silent> i
		\ <Cmd>call ddu#ui#ff#do_action('openFilterWindow')<CR>
	nnoremap <buffer><silent> q
		\ <Cmd>call ddu#ui#ff#do_action('quit')<CR>
endfunction

autocmd FileType ddu-ff-filter call s:ddu_filter_my_settings()
function! s:ddu_filter_my_settings() abort
	nnoremap <buffer> <CR>
		\ <Cmd>call ddu#ui#ff#do_action('itemAction')<CR>
	nnoremap <buffer><silent> q
		\ <Cmd>call ddu#ui#ff#do_action('quit')<CR>
	inoremap <buffer> <CR>
		\ <Cmd>call ddu#ui#ff#do_action('itemAction')<CR>
	inoremap <buffer> <C-j>
		\ <Cmd>call ddu#ui#ff#execute("call cursor(line('.')+1,0)")<CR>
	inoremap <buffer> <C-k>
		\ <Cmd>call ddu#ui#ff#execute("call cursor(line('.')-1,0)")<CR>
endfunction

"ddu keymapping.
nnoremap <SID>[ug] <Nop>
nmap ,u <SID>[ug]

nnoremap <silent> <SID>[ug]m :<C-u>Ddu mr<CR>
nnoremap <silent> <SID>[ug]b :<C-u>Ddu buffer<CR>
nnoremap <silent> <SID>[ug]r :<C-u>Ddu register<CR>
nnoremap <silent> <SID>[ug]n :<C-u>Ddu file -source-param-new -volatile<CR>
nnoremap <silent> <SID>[ug]f :<C-u>Ddu file<CR>

call ddu#custom#patch_local('filer', {
	\   'ui': 'filer',
	\   'sources': [
	\     {
	\       'name': 'file',
	\       'params': {},
	\     },
	\   ],
	\   'sourceOptions': {
	\     '_': {
	\       'columns': ['filename'],
	\     },
	\   },
	\   'kindOptions': {
	\     'file': {
	\       'defaultAction': 'open',
	\     },
	\   },
	\   'uiParams': {
	\     'filer': {
	\       'winWidth': 40,
	\       'split': 'vertical',
	\       'splitDirection': 'topleft',
	\     }
	\   },
	\ })

autocmd FileType ddu-filer call s:ddu_filer_my_settings()
function! s:ddu_filer_my_settings() abort
	nnoremap <buffer><silent><expr> <CR>
		\ ddu#ui#filer#is_directory() ?
		\ "<Cmd>call ddu#ui#filer#do_action('expandItem', {'mode': 'toggle'})<CR>" :
		\ "<Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'open', 'params': {'command': 'vsplit'}})<CR>"

	nnoremap <buffer><silent><expr> <Space>
		\ ddu#ui#filer#is_directory() ?
		\ "<Cmd>call ddu#ui#filer#do_action('expandItem', {'mode': 'toggle'})<CR>" :
		\ "<Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'open', 'params': {'command': 'split'}})<CR>"

	nnoremap <buffer><silent> <Esc>
		\ <Cmd>call ddu#ui#filer#do_action('quit')<CR>

	nnoremap <buffer><silent> q
		\ <Cmd>call ddu#ui#filer#do_action('quit')<CR>

	nnoremap <buffer><silent> c
		\ <Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'copy'})<CR>

	nnoremap <buffer><silent> p
		\ <Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'paste'})<CR>

	nnoremap <buffer><silent> d
		\ <Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'delete'})<CR>

	nnoremap <buffer><silent> r
		\ <Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'rename'})<CR>

	nnoremap <buffer><silent> mv
		\ <Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'move'})<CR>

	nnoremap <buffer><silent> t
		\ <Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'newFile'})<CR>

	nnoremap <buffer><silent> mk
		\ <Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'newDirectory'})<CR>

	nnoremap <buffer><silent> yy
		\ <Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'yank'})<CR>
endfunction

nmap <silent> ;d <Cmd>call ddu#start({
	\   'name': 'filer',
	\   'uiParams': {'filer': {'search': expand('%:p')}},
	\ })<CR>

" }}}

" {{{neodark
let g:neodark#terminal_transparent = 1
let g:neodark#solid_vertsplit = 1
" }}}

" {{{lightline
let g:lightline = {}
let g:lightline.colorscheme = 'neodark'
" }}}

" }}}

" {{{ commands
augroup restore-cursor
	autocmd!
	autocmd BufReadPost *
		\ : if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
		\ |   exe "normal! g`\""
		\ | endif

		\ : if empty(&buftype) && line('.') > winheight(0) / 2
		\ |   execute 'normal! zz'
		\ | endif
augroup END

autocmd FileType vim setlocal foldmethod=marker
" }}}

" {{{ other
colorscheme neodark
filetype plugin indent on

command! Vimrc execute 'edit ~/.dotfiles/vim/rc/_vimrc'
command! Gvimrc execute 'edit ~/.dotfiles/vim/rc/gvimrc'
" }}}
