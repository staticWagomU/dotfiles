syntax off
filetype off
filetype plugin indent off
if &compatible
	set nocompatible
endif

" {{{ options
if has('vim_starting')
	set encoding=utf-8
	set fileencodings=utf-8,sjis,iso-2022-jp,ucs-bom,euc-jp,cp932,default,latin1
	set fileformats=unix,dos,mac
endif
scriptencoding utf-8

set helplang=ja
set signcolumn=yes 
set hidden
set laststatus=2
set mouse=a
" クリップボードレジスタを使用する autoselectはわからない
set clipboard=unnamed,autoselect
" 音を鳴らさないようにする
set belloff=all
set formatoptions+=mMj
set ambiwidth=double
" 大文字の括弧を%でマッチさせる
set matchpairs+=「:」,（:）
set directory=~
set backupdir=~
set undodir=~
" normal modeに戻った後も<BS> <DELETE>を効かせる
set backspace=indent,eol,start
set title
let &g:titlestring =
			\ "%{expand('%:p:~:.')} %<\(%{fnamemodify(getcwd(), ':~')}\)%(%m%r%w%)"
set nowrap
if !has('gui_running')
	set t_Co=256
endif
set noshowmode
set shortmess +=I
let g:mapleader = "\<Space>"
" }}}

" {{{ plugins
call plug#begin()

" {{{ lsp
Plug 'https://github.com/prabirshrestha/vim-lsp'
Plug 'https://github.com/mattn/vim-lsp-settings'
Plug 'https://github.com/prabirshrestha/asyncomplete.vim'
Plug 'https://github.com/prabirshrestha/asyncomplete-lsp.vim'

let g:lsp_settings_filetype_typescript = ['typescript-language-server', 'eslint-language-server', 'deno']
let g:lsp_settings = {
	 \ 'efm-langserver': {
	 \   'disabled': 0,
	 \   'allowlist': ['markdown'],
	 \  }
	 \ }
let g:lsp_diagnostics_float_cursor = 1
let g:lsp_diagnostics_enabled = 1
function! s:on_lsp_buffer_enabled() abort
 setlocal completeopt=menu
 setlocal omnifunc=lsp#complete
 if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
 nmap <buffer> ;d <plug>(lsp-definition)
 nmap <buffer> ;s <plug>(lsp-document-symbol-search)
 nmap <buffer> ;S <plug>(lsp-workspace-symbol-search)
 nmap <buffer> ;r <plug>(lsp-references)
 nmap <buffer> ;i <plug>(lsp-implementation)
 nmap <buffer> ;T <plug>(lsp-type-definition)
 nmap <buffer> ;r <plug>(lsp-rename)
 nmap <buffer> [g <plug>(lsp-previous-diagnostic)
 nmap <buffer> ]g <plug>(lsp-next-diagnostic)
 nmap <buffer> K <plug>(lsp-hover)
endfunction

augroup lsp_install
 au!
 au User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END
" }}}

" {{{ denops plugins
Plug 'https://github.com/vim-denops/denops.vim'

Plug 'https://github.com/lambdalisue/gin.vim'
" {{{ gin settings
augroup FileTypeGin
 autocmd!

 autocmd FileType gin-diff,gin-log,gin-status call s:GinFileTypeSetup()

 autocmd FileType gin-diff call s:GinDiffSetup()
 autocmd FileType gin-status call s:GinStatusSetup()
augroup END

function! s:GinFileTypeSetup() abort
 nnoremap <buffer> c <Cmd>Gin commit<CR>
 nnoremap <buffer> s <Cmd>GinStatus<CR>
 nnoremap <buffer> L <Cmd>GinLog --graph --oneline<CR>
 nnoremap <buffer> d <Cmd>GinDiff ++processor=delta\ --no-gitconfig\ --color-only\ --cached<CR>
 nnoremap <buffer> q <Cmd>bdelete<CR>
 nnoremap <buffer> p <Cmd>Gin push<CR>
 nnoremap <buffer> P <Cmd>Gin pull<CR>
endfunction

function! s:GinDiffSetup() abort
 nnoremap <buffer> gd <Plug>(gin-diffjump-smart)<Cmd>lua vim.lsp.buf.definition()<CR>
endfunction

function! s:GinStatusSetup() abort
 nnoremap <buffer> h <Plug>(gin-action-stage)
 nnoremap <buffer> l <Plug>(gin-action-unstage)
endfunction

nnoremap <C-g><C-s> <Cmd>GinStatus<Cr>
nnoremap <C-g><C-l> <Cmd>GinLog --graph --oneline<Cr>
nnoremap <C-g><C-b> <Cmd>GinBranch<Cr>
" }}}

Plug 'https://github.com/vim-skk/skkeleton'
" {{{ skkeleton settings
nnoremap <C-j> i<Plug>(skkeleton-toggle)
imap <C-j> <Plug>(skkeleton-toggle)
cmap <C-j> <Plug>(skkeleton-toggle)
tmap <C-j> <Plug>(skkeleton-toggle)

function! s:getDict(d) abort
 return expand("~\\vimfiles\\plugged\\dict\\SKK-JISYO." . a:d)
endfunction

function! s:skkeleton_init() abort
 call skkeleton#config({
		\ 'eggLikeNewline': v:true,
		\ 'globalDictionaries': [s:getDict("L")]
		\ })
 call skkeleton#register_kanatable('rom', {
		\ "z\<Space>": ["\u3000", ''],
		\ })
endfunction
augroup skkeleton-initialize-pre
 autocmd!
 autocmd User skkeleton-initialize-pre call s:skkeleton_init()
augroup END
" }}}

Plug 'https://github.com/skk-dev/dict'
" {{{ gin-settings

" }}}

" }}}

" {{{ git

" }}}

Plug 'https://github.com/ctrlpvim/ctrlp.vim/'

Plug 'https://github.com/lambdalisue/fern.vim'

" いれようと思っているプラグインリスト
" - [ ] skkeleton
call plug#end()
" }}} 

" {{{ keymaps
"           Mode  | Norm | Ins | Cmd | Vis | Sel | Opr | Term | Lang | ~
"  Command        +------+-----+-----+-----+-----+-----+------+------+ ~
"  [nore]map      |  @   |  -  |  -  |  @  |  @  |  @  |  -   |  -   |
"  n[nore]map     |  @   |  -  |  -  |  -  |  -  |  -  |  -   |  -   |
"  [nore]map!     |  -   |  @  |  @  |  -  |  -  |  -  |  -   |  -   |
"  i[nore]map     |  -   |  @  |  -  |  -  |  -  |  -  |  -   |  -   |
"  c[nore]map     |  -   |  -  |  @  |  -  |  -  |  -  |  -   |  -   |
"  v[nore]map     |  -   |  -  |  -  |  @  |  @  |  -  |  -   |  -   |
"  x[nore]map     |  -   |  -  |  -  |  @  |  -  |  -  |  -   |  -   |
"  s[nore]map     |  -   |  -  |  -  |  -  |  @  |  -  |  -   |  -   |
"  o[nore]map     |  -   |  -  |  -  |  -  |  -  |  @  |  -   |  -   |
"  t[nore]map     |  -   |  -  |  -  |  -  |  -  |  -  |  @   |  -   |
"  l[nore]map     |  -   |  @  |  @  |  -  |  -  |  -  |  -   |  @   |

nnoremap <Leader> <Nop>
xnoremap <Leader> <Nop>

nnoremap j gj
nnoremap k gk
nnoremap gj j
nnoremap gk k

" expand path
cmap <C-x> <C-r>=expand('%:p:h')<CR>
" expand file 
cmap <C-z> <C-r>=expand('%:p')<CR>

nnoremap <silent> <Leader>ls :<C-u>ls<CR>
nnoremap <silent> <Leader>w :<C-u>w<CR>
nnoremap <silent> <Leader>bn :<C-u>bn<CR>
nnoremap <silent> <Leader>bp :<C-u>bp<CR>
nnoremap <silent> <Leader>bd :<C-u>bd<CR>
nnoremap <silent> <Leader>cd :<C-u>cd %:p:h<CR> :cd<CR>

nnoremap <silent> v2 vi"
nnoremap <silent> v7 vi'
nnoremap <silent> v8 vi(
nnoremap <silent> v[ vi[
nnoremap <silent> v{ vi{
nnoremap <silent> v@ vi`

nnoremap <silent> va2 va"
nnoremap <silent> va7 va'
nnoremap <silent> va8 va(
nnoremap <silent> va[ va[
nnoremap <silent> va{ va{
nnoremap <silent> va@ va`

onoremap <silent> 2 i"
onoremap <silent> 7 i'
onoremap <silent> 8 i(
onoremap <silent> [ i[
onoremap <silent> { i{
onoremap <silent> @ i`

onoremap <silent> 2a a"
onoremap <silent> 7a a'
onoremap <silent> 8a a(
onoremap <silent> [a a[
onoremap <silent> {a a{
onoremap <silent> @a a`

nnoremap <silent> \ :<C-u>so $MYVIMRC<CR>

vnoremap <RightMouse> :w !clip.exe<CR><ESC>
" }}}

" {{{ commands
augroup restore-cursor
	autocmd!
	autocmd BufReadPost *
				\ : if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
				\ |   exe "normal! g`\""
				\ | endif

				\ : if empty(&buftype) && line('.') > winheight(0) / 2
				\ |   execute 'normal! zz'
				\ | endif
augroup END

augroup fileTypeIndent
	autocmd!
	autocmd BufNewFile,BufRead vimrc setlocal tabstop=2 shiftwidth=1
augroup END

autocmd FileType vim setlocal foldmethod=marker

set background=dark
filetype plugin indent on

if has('syntax')
 syntax on
endif
colorscheme desert

let &t_SI="\<Esc>[4 q"
let &t_EI="\<Esc>[2 q"
" }}}
