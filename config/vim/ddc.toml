[[plugins]]
repo='Shougo/pum.vim'

[[plugins]]
repo='Shougo/ddc-ui-native'
depends = ['ddc.vim']
on_source = 'ddc.vim'

[[plugins]]
repo='Shougo/ddc-ui-pum'
depends = ['ddc.vim']
on_source = 'ddc.vim'

[[plugins]]
repo='Shougo/ddc-source-around'
depends = ['ddc.vim']
on_source = 'ddc.vim'

[[plugins]]
repo = 'shun/ddc-source-vim-lsp'
depends = ['ddc.vim']
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/ddc-buffer'
depends = ['ddc.vim']
on_source = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-source-file'
depends = ['ddc.vim']
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-cmdline'
depends = ['ddc.vim']
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-cmdline-history'
depends = ['ddc.vim']
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-line'
depends = ['ddc.vim']
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-input'
depends = ['ddc.vim']
on_source = 'ddc.vim'

[[plugins]]
repo='Shougo/ddc-filter-matcher_head'
depends = ['ddc.vim']
on_source = 'ddc.vim'

[[plugins]]
repo='Shougo/ddc-filter-sorter_rank'
depends = ['ddc.vim']
on_source = 'ddc.vim'

[[plugins]]
repo='gamoutatsumi/ddc-sorter_ascii'
depends = ['ddc.vim']
on_source = 'ddc.vim'

[[plugins]]
repo = 'tani/ddc-fuzzy'
depends = ['ddc.vim']
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/denops-signature_help'
depends = ['denops.vim', 'vim-lsp']
on_source = 'ddc.vim'
hook_source = '''
let g:signature_help_config = #{
			\ border: v:true,
			\ maxWidth: 80,
			\ maxHeight: 30,
			\ contentsStyle: 'floating',
			\ viewStyle: 'virtual',
			\ multiLabel: v:false,
			\ fallbackToBelow: v:true,
			\ }

call signature_help#enable()
'''

[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['denops.vim', 'pum.vim']
hook_source = '''
" どのイベントで発火させるか
call ddc#custom#patch_global('autoCompleteEvents',
			\ ['InsertEnter', 'TextChangedI', 'TextChangedP', 'CmdlineChanged'])

" 補完ウィンドウになにを使うか
call ddc#custom#patch_global('ui', 'pum')

" 補完ソースを指定
call ddc#custom#patch_global('sources', ['skkeleton',
			\ 'vim-lsp',
			\ 'file',
			\ 'buffer',
			\ 'around',
			\ 'input',
			\ 'cmdline',
			\ 'cmdline-history'])

" 各補完ソースについてのオプション設定(識別ラベルやmatcher, sorter等を指定)
call ddc#custom#patch_global('sourceOptions', #{
			\ _: #{ matchers: ['matcher_head'], sorters: ['sorter_ascii'] },
			\ vim-lsp: #{
			\   mark: 'lsp',
			\   forceCompletionPattern: '\.\w*|:\w*|->\w*|"\w*|\\\w*|\+\w*|\/\w*',
			\   ignoreCase: v:true,
			\   isVolatile: v:true
			\ },
			\ skkeleton: #{
			\   mark: 'skkeleton',
			\   matchers: ['skkeleton'],
			\   sorters: [],
			\   isVolatile: v:true,
			\ },
			\ around: #{
			\   mark: 'A',
			\   isVolatile: v:true,
			\ },
			\ buffer: #{
			\   mark: 'B',
			\   isVolatile: v:true,
			\ },
			\ file: #{
			\   mark: 'F',
			\   isVolatile: v:true,
			\   forceCompletionPattern: '\S/\S*',
			\   converters: [],
			\ }})

call ddc#custom#patch_global('sourceParams', #{
			\   around: #{ maxSize: 500 },
			\   file: #{ maxSize: 10 },
			\   input: #{ maxSize: 10 },
			\   vim-lsp: #{ maxSize: 500 },
			\   cmdline: #{ maxSize: 500 },
			\   cmdline-history: #{ maxSize: 500 },
			\   skkeleton: #{ maxSize: 10 },
			\ })

inoremap <expr><S-TAB>  pumvisible() ? '<C-p>' : '<C-h>'
inoremap <silent><expr> <TAB>
			\ pumvisible() ? '<C-n>' :
			\ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
			\ '<TAB>' : ddc#map#manual_complete()
nnoremap : <Cmd>call CommandlinePre()<CR>:
inoremap <C-p> <Cmd>call pum#map#insert_relative(-1)<CR>
inoremap <C-n> <Cmd>call pum#map#insert_relative(+1)<CR>

call ddc#custom#patch_global('cmdlineSources', {
			\ ':': ['cmdline-history', 'cmdline', 'around'],
			\ '@': ['cmdline-history', 'input', 'file', 'around'],
			\ '>': ['cmdline-history', 'input', 'file', 'around'],
			\ '/': ['around', 'line'],
			\ '?': ['around', 'line'],
			\ '-': ['around', 'line'],
			\ '=': ['input'],
			\ })

function! CommandlinePre() abort
	cnoremap <Tab>   <Cmd>call pum#map#insert_relative(+1)<CR>
	cnoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
	cnoremap <C-n>   <Cmd>call pum#map#insert_relative(+1)<CR>
	cnoremap <C-p>   <Cmd>call pum#map#insert_relative(-1)<CR>
	cnoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
	cnoremap <C-e>   <Cmd>call pum#map#cancel()<CR>

	" Overwrite sources
	if !exists('b:prev_buffer_config')
		let b:prev_buffer_config = ddc#custom#get_buffer()
	endif
	call ddc#custom#patch_buffer('cmdlineSources',
				\ ['cmdline', 'cmdline-history', 'around'])

	autocmd User DDCCmdlineLeave ++once call CommandlinePost()
	autocmd InsertEnter <buffer> ++once call CommandlinePost()

	" Enable command line completion
	call ddc#enable_cmdline_completion()
endfunction

function! CommandlinePost() abort
	silent! cunmap <Tab>
	silent! cunmap <S-Tab>
	silent! cunmap <C-n>
	silent! cunmap <C-p>
	silent! cunmap <C-y>
	silent! cunmap <C-e>

	" Restore sources
	if exists('b:prev_buffer_config')
		call ddc#custom#set_buffer(b:prev_buffer_config)
		unlet b:prev_buffer_config
	else
		call ddc#custom#set_buffer({})
	endif
endfunction

call skkeleton#config({'completionRankFile': '~\\.skkeleton\\rank.json'})

call ddc#enable()
'''
